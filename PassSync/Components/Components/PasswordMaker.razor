@using Microsoft.Maui.Controls
@using PassSync.Storage

<div class="popup">
    <Card>
        <CardBody>
            <CardTitle>
                @(IsNew ? "New Password" : "Edit Password")
                <button class="btn-close" @onclick=ExitPressed/>
            </CardTitle>
            <CardText>
                <div class="grid">
                    <div class="grid-item">Name:</div>
                    <div class="grid-item"><InputText @bind-Value=Name placeholder="Website or app..." /></div>

                    <div class="grid-item">Password:</div>
                    @if (IsRandom) {
                        <div class="grid-item"><input type="text" placeholder=@($"Ex: {RandomPlaceholder}") disabled/></div>
                    }
                    else {
                        <div class="grid-item"><InputText @bind-Value=Password placeholder="The password..." /></div>
                    }

                    <div class="grid-item">Random:</div>
                    <div class="grid-item"><InputCheckbox @bind-Value=IsRandom /></div>

                    @if (IsRandom) {
                        <div class="ignore-grid">
                            <text class="grid-item">ABC: <InputCheckbox @bind-Value=UpperCase /></text>
                            <text class="grid-item">abc: <InputCheckbox @bind-Value=LowerCase /></text>
                            <text class="grid-item">123: <InputCheckbox @bind-Value=Numbers /></text>
                            <text class="grid-item">_: <InputCheckbox @bind-Value=Underscore /></text>
                            <text class="grid-item">!@@#: <InputCheckbox @bind-Value=Special /></text>
                        </div>

                        <div class="grid-item">Exclude:</div>
                        <div class="grid-item"><InputText @bind-Value=Exclude placeholder="Excluded characters..." /></div>

                        <div class="grid-item">Length:</div>
                        <div class="grid-item"><input type="number" step="1" min="6" pattern="\d+" @bind=Length /></div>
                    }

                    <div class="grid-item"><br />Optional:</div>
                    <div class="grid-item" />

                    <div class="grid-item">Username:</div>
                    <div class="grid-item"><InputText @bind-Value=Username placeholder="The username..." /></div>

                    <div class="grid-item">Url:</div>
                    <div class="grid-item"><InputText @bind-Value=Url placeholder="The website url..." /></div>

                    <div class="grid-item"><button class="btn btn-primary" @onclick=OnSubmitPressed>Submit</button></div>
                </div>
            </CardText>
        </CardBody>
    </Card>
</div>

@code {
    /// <summary>
    /// Changes the title to if this is a new password or an edit
    /// </summary>
    [Parameter]
    public bool IsNew { get; set; }
    /// <summary>
    /// Tells the parent razor when this is just a normal exit
    /// </summary>
    [Parameter]
    public EventCallback ExitPressed { get; set; }
    /// <summary>
    /// Returns a new password record to the parent razor
    /// </summary>
    [Parameter]
    public EventCallback<Password> SubmitPressed { get; set; }


    // All the different parameters for a password

    private string _name = "";
    private string Name { get => _name; set { _name = value; OnChanged(); } }

    private string _password = "";
    private string Password { get => _password; set { _password = value; OnChanged(); } }

    private string _randomPlaceholder = "";
    private string RandomPlaceholder { get => _randomPlaceholder; set { _randomPlaceholder = value; OnChanged(); } }

    private string _username = "";
    private string Username { get => _username; set { _username = value; OnChanged(); } }

    private string _url = "";
    private string Url { get => _url; set { _url = value; OnChanged(); } }

    private bool _isRandom = true;
    private bool IsRandom { get => _isRandom; set { _isRandom = value; OnChanged(); } }

    private bool _upperCase = true;
    private bool UpperCase { get => _upperCase; set { _upperCase = value; OnChanged(); } }

    private bool _lowerCase = true;
    private bool LowerCase { get => _lowerCase; set { _lowerCase = value; OnChanged(); } }

    private bool _numbers = true;
    private bool Numbers { get => _numbers; set { _numbers = value; OnChanged(); } }

    private bool _underscore = true;
    private bool Underscore { get => _underscore; set { _underscore = value; OnChanged(); } }

    private bool _special = true;
    private bool Special { get => _special; set { _special = value; OnChanged(); } }

    private string _exclude = "";
    private string Exclude { get => _exclude; set { _exclude = value; OnChanged(); } }

    private int _length = 128;
    private int Length { get => _length; set { _length = value; OnChanged(); } }

    public PasswordMaker() {
        OnChanged();
    }

    private void OnChanged() {
        // Generate example password for display
        if (IsRandom) {
            Password dummyPassword = new(Name, Username, Url, true, UpperCase, LowerCase, Numbers, Underscore, Special, Exclude, Length);
            dummyPassword.GenerateRandom();

            _randomPlaceholder = dummyPassword.Text;
        }
    }

    private void OnSubmitPressed() {
        List<string> errors = new();

        // Check if name is empty
        if (string.IsNullOrWhiteSpace(Name))
            errors.Add("* Name must not be empty");

        // Check if non-random password is empty
        if (!IsRandom && string.IsNullOrWhiteSpace(Password))
            errors.Add("* Password must not be empty if not randombly generated");

        // Check if random password length is >= 6
        if (IsRandom && Length < 6)
            errors.Add("* Password must have a random length >= 6");

        // Display errors so far and return if any
        if (errors.Count > 0) {
            AlertErrors(errors);
            return;
        }

        Password newPassword = new(Name, Username, Url, IsRandom, UpperCase, LowerCase, Numbers, Underscore, Special, Exclude, Length);

        // Generate random if it is random
        if (IsRandom) {
            newPassword.GenerateRandom();

            // Check if the random generator was successful
            if (string.IsNullOrEmpty(newPassword.Text))
                errors.Add("* Password failed to generate. Check if characters are left available");
        }
        // Set to user specified password otherwise
        else
            newPassword.Text = Password;

        // Display errors at this point and return if any
        if (errors.Count > 0) {
            AlertErrors(errors);
            return;
        }

        _ = SubmitPressed.InvokeAsync(newPassword);
    }

    private void AlertErrors(ICollection<string> errors) {
        string title = "Invalid Input";
        string body = string.Join('\n', errors);

        _ = Application.Current.MainPage.DisplayAlert(title, body, "Edit");
    }
}
