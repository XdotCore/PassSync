@using Microsoft.Maui.ApplicationModel.DataTransfer
@using PassSync.Storage

<div class="container">
    <div class="copy">
        <button class="btn btn-primary" @onclick=CopyPassword>
            <Icon Name=CopyIcon />
        </button>
    </div>
    <Accordion>
        <AccordionItem>
            <TitleTemplate>
                @Password.Name
            </TitleTemplate>
            <Content>
                <div class="password">
                    Current:
                    <div>@Password.Text</div>
                </div>
                <div>
                    @if (!string.IsNullOrEmpty(Password.Username)) {
                        <text>
                            <text class="item">Username: @Password.Username</text>
                        </text>
                    }
                    @if (!string.IsNullOrEmpty(Password.Url)) {
                        <text>
                            <text>Website: <a href=@Password.Url>@Password.Url</a></text>
                        </text>
                    }
                </div>
                <div class="ignore-grid">
                    <text class="item">ABC: <InputCheckbox @bind-Value=UpperCase disabled /></text>
                    <text class="item">abc: <InputCheckbox @bind-Value=LowerCase disabled /></text>
                    <text class="item">123: <InputCheckbox @bind-Value=Numbers disabled /></text>
                    <text class="item">_: <InputCheckbox @bind-Value=Underscore disabled /></text>
                    <text>!@@#: <InputCheckbox @bind-Value=Special disabled /></text>
                </div>
                <div>
                    <button class="btn btn-primary" @onclick=PromptDelete>
                        <Icon Name=IconName.Trash />
                    </button>
                </div>
            </Content>
        </AccordionItem>
    </Accordion>
</div>

<Modal @ref=DeleteModal IsVerticallyCentered=true>
    <BodyTemplate> Are you sure you want to delete this password? </BodyTemplate>
    <FooterTemplate>
        <Button Color=ButtonColor.Secondary @onclick=HideDeletePrompt>Close</Button>
        <Button Color=ButtonColor.Primary @onclick=DeletePassword>Delete</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public Password Password { get; set; }

    [Parameter]
    public EventCallback StateChanged { get; set; }

    // Needed because bind-Value requires a setter
    private bool UpperCase { get => Password.UpperCase; set { } }
    private bool LowerCase { get => Password.LowerCase; set { } }
    private bool Numbers { get => Password.Numbers; set { } }
    private bool Underscore { get => Password.Underscore; set { } }
    private bool Special { get => Password.Special; set { } }

    private IconName CopyIcon { get; set; } = IconName.Copy;

    private Modal DeleteModal { get; set; }

    private async void CopyPassword() {
        await Clipboard.SetTextAsync(Password.Text);

        CopyIcon = IconName.CheckLg;
        await Task.Delay(1000);
        CopyIcon = IconName.Copy;
        StateHasChanged();
    }

    private async void PromptDelete() {
        await DeleteModal.ShowAsync();
    }

    private async void HideDeletePrompt() {
        await DeleteModal.HideAsync();
    }

    private async void DeletePassword() {
        await DeleteModal.HideAsync();
        PasswordManager.Remove(Password);
        await StateChanged.InvokeAsync();
    }
}
