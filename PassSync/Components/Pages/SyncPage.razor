@page "/sync"
@implements IDisposable
@inject NavigationManager NavigationManager
@using Button = BlazorBootstrap.Button
@using InTheHand.Bluetooth
@using InTheHand.Net.Bluetooth
@using InTheHand.Net.Sockets
@using Microsoft.AspNetCore.DataProtection
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Controls
@using System.IO
@using System.Net.Sockets
@using PassSync.Components.Components
@using PassSync.Storage
@using System.Text
@using System.Security.Cryptography
@using System.ComponentModel.DataAnnotations

@if (!HasBluetoothPermission) {
    <p>Please enable bluetooth for this app in settings.</p>
}

@if (!IsBluetoothOn && HasBluetoothPermission) {
    <p>Please enable bluetooth.</p>
}

@if (HasBluetoothPermission && IsBluetoothOn) {
    if (ConnectedDevice is null) {
        <div class="noConnectionDiv">
            <Button Color=ButtonColor.Primary @onclick=ConnectToDevice>Connect to Device</Button>
            Choose a device to sync with
        </div>
    }
    else {
        <div class="connectionDiv">
            <div class="deviceCard">
                <Card>
                    <CardHeader>
                        Device Connected
                    </CardHeader>
                    <CardBody>
                        <div>Name: @ConnectedDevice.DeviceName</div>
                        <div>Address: @ConnectedDevice.DeviceAddress</div>
                        <div>Type: @ConnectedDevice.ClassOfDevice.Device</div>
                        <div class="syncBtn">
                            <Button Color=ButtonColor.Secondary @onclick=ConnectToDevice>Another</Button>
                            <Button Color=ButtonColor.Primary @onclick=StartSync>Sync</Button>
                        </div>
                    </CardBody>
                </Card>
            </div>
        </div>
    }
}
else {
    <p>A bluetooth connection is needed to find devices and sync passwords across them.</p>
}

<Modal @ref=StatusModal IsVerticallyCentered=true UseStaticBackdrop=true CloseOnEscape=false ShowCloseButton=false OnHiding=@(() => IsCancelled = true)>
    <BodyTemplate>
        @switch (Status) {
            case TransferStatus.AttemptingClient:
                <text>Attempting as client</text>
                <Spinner />
                break;
            case TransferStatus.Listening:
                <text>Waiting for other device</text>
                <Spinner />
                break;
            case TransferStatus.IsClient:
                <text>Waiting for input on other device</text>
                <Spinner />
                break;
            case TransferStatus.ShowCode:
                <text>Input the following code on the other device</text>
                <h3>@Code</h3>
                break;
            case TransferStatus.InputCode:
                <text>Input here the code from the other device</text>
                <NumberInput TValue="int" @bind-Value=Code Placeholder="Enter 6 digit code" Step=0 />
                <div class="red" hidden=@(Code >= CodeMin && Code <= CodeMax)>The code will always be an 6 digit number</div>
                break;
            case TransferStatus.Transferring:
                <text>Making sync transfer</text>
                <Spinner />
                break;
            case TransferStatus.Conflict:
                <text>Which version will you keep?</text>
                <InputRadioGroup @bind-Value=ConflictChosen>
                    @for (int i = 0; i < Conflicts.Count; i++) {
                        <InputRadio Value=i id=@($"conflict{i}")/>
                        <label for=@($"conflict{i}")>i</label>
                        <PasswordDisplay IsConflict=true Password=Conflicts[i] />
                    }
                </InputRadioGroup>
                break;
            case TransferStatus.Confirm:
                <text>Changes will make affect now (this cannot be undone)</text>
                break;
            default:
                <text>Unknown State</text>
                break;
        }
    </BodyTemplate>
    <FooterTemplate>
        @switch (Status) {
            case TransferStatus.AttemptingClient:
                break;
            case TransferStatus.Listening:
                <Button Color=ButtonColor.Secondary @onclick=StatusModal.HideAsync>Cancel</Button>
                break;
            case TransferStatus.IsClient:
                break;
            case TransferStatus.ShowCode:
                break;
            case TransferStatus.InputCode:
                <Button Color=ButtonColor.Secondary @onclick=StatusModal.HideAsync>Cancel</Button>
                <Button Color=ButtonColor.Primary @onclick=@(() => IsConfirmed = true) Disabled=@(Code < CodeMin || Code > CodeMax)>Confirm</Button>
                break;
            case TransferStatus.Transferring:
                break;
            case TransferStatus.Conflict:
                <Button Color=ButtonColor.Primary @onclick=@(() => IsConfirmed = true)>Confirm</Button>
                break;
            case TransferStatus.Confirm:
                <Button Color=ButtonColor.Secondary @onclick=StatusModal.HideAsync>Cancel</Button>
                <Button Color=ButtonColor.Primary @onclick=@(() => IsConfirmed = true)>Confirm</Button>
                break;
            default:
                <Button Color=ButtonColor.Secondary @onclick=StatusModal.HideAsync>Close</Button>
                break;
        }
    </FooterTemplate>
</Modal>

@code {
    private static readonly Guid AppGuid = new("{601CAE8F-89B7-47C1-A97E-981E6C3F69FF}");

    private bool HasBluetoothPermission { get; set; } = false;
    private bool IsBluetoothOn { get; set; } = false;

    private BluetoothDeviceInfo ConnectedDevice { get; set; } = null;

    private Modal StatusModal { get; set; }
    private TransferStatus Status { get; set; }
    private bool IsCancelled { get; set; }
    private bool IsConfirmed { get; set; }

    private int Code { get; set; }
    private const int CodeMin = 100000;
    private const int CodeMax = 999999;

    private List<Password> Conflicts { get; set; } = [];
    private int ConflictChosen { get; set; }

    protected override async Task OnInitializedAsync() {
        HasBluetoothPermission = await AskPermission();

        if (!HasBluetoothPermission)
            return;

        IsBluetoothOn = await Bluetooth.GetAvailabilityAsync();
        Bluetooth.AvailabilityChanged += OnBluetoothChanged;
    }

    public void Dispose() {
        Bluetooth.AvailabilityChanged -= OnBluetoothChanged;
    }

    private async Task<bool> AskPermission() {
        // this includes all permissions needed here: https://github.com/dotnet-bluetooth-le/dotnet-bluetooth-le?tab=readme-ov-file#android
        PermissionStatus status = await Permissions.CheckStatusAsync<Permissions.Bluetooth>();

        if (status == PermissionStatus.Granted)
            return true;

        if (Permissions.ShouldShowRationale<Permissions.Bluetooth>())
            await Application.Current.MainPage.DisplayAlert("Bluetooth Permission", "Bluetooth is necessary to sync across devices.", "Okay");

        status = await Permissions.RequestAsync<Permissions.Bluetooth>();
        return status == PermissionStatus.Granted;
    }

    private async void OnBluetoothChanged(object s, EventArgs e) {
        IsBluetoothOn = await Bluetooth.GetAvailabilityAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ConnectToDevice() {
        BluetoothDevicePicker devicePicker = new();
        ConnectedDevice = await devicePicker.PickSingleDeviceAsync();
    }

    private async Task StartSync() {
        Status = TransferStatus.AttemptingClient;
        await StatusModal.ShowAsync();

        // I do not want the user to be able to leave in the middle of communication
        // I have done everything I have thought of to prevent this
        ValueTask PreventNavigation(LocationChangingContext ctx) {
            ctx.PreventNavigation();
            return ValueTask.CompletedTask;
        }
        // once it is disposed on return, PreventNavigation will be unregistered
        using IDisposable handler = NavigationManager.RegisterLocationChangingHandler(PreventNavigation);

        if (!await BeClient())
            await BeHost();

        await StatusModal.HideAsync();
    }

    private async Task BeHost() {
        await SetStatus(TransferStatus.Listening);
        try {
            using BluetoothListener listener = new(AppGuid);
            listener.Start();

            IsCancelled = false;
            BluetoothClient client = null;
            // awesome, pending doesn't work on android, whoo!, source: https://github.com/inthehand/32feet/issues/337#issuecomment-1706223549
            if (!OperatingSystem.IsAndroid()) {
                while (!listener.Pending() && !IsCancelled)
                    await Task.Delay(25);
                if (!IsCancelled)
                    client = listener.AcceptBluetoothClient();
            }
            else {
                bool isAccepted = false;
                _ = Task.Run(() => {
                    client = listener.AcceptBluetoothClient();
                    isAccepted = true;
                });
                while (!isAccepted && !IsCancelled)
                    await Task.Delay(25);
            }

            if (IsCancelled) {
                // just in case since AcceptBluetoothClient is still running on android
                listener.Dispose();
                return;
            }

            using Stream stream = client.GetStream();

            // send byte of confirmation (any value)
            await stream.WriteAsync(new byte[1]);
            await stream.FlushAsync();

            Code = RandomNumberGenerator.GetInt32(CodeMin, CodeMax);
            await SetStatus(TransferStatus.ShowCode);

            // wait for same code confirmation
            byte[] recCode = new byte[4];
            await stream.ReadExactlyAsync(recCode, 0, 4);
            int code = BitConverter.ToInt32(recCode);

            if (code == -1) {
                await Application.Current.MainPage.DisplayAlert(null, "Input code was canceled on other device", "Okay");
                return;
            }

            // send boolean confirmation back
            bool isSame = code == Code;
            await stream.WriteAsync(BitConverter.GetBytes(isSame));
            await stream.FlushAsync();

            if (!isSame) {
                await Application.Current.MainPage.DisplayAlert(null, "Inputted code does not match.", "Okay");
                return;
            }

            await SetStatus(TransferStatus.Transferring);

            IEnumerable<Password> thisPasswords = await PasswordManager.GetAll();
            IEnumerable<Password> otherPasswords = await RecievePasswords(stream);
            if (otherPasswords == null)
                return;
            List<Password> newList = new(thisPasswords.Concat(otherPasswords));

            // resolve conflicts and duplicates
            for (int i = 0; i < newList.Count; i++) {
                Conflicts.Clear();
                Conflicts.Add(newList[i]);

                for (int j = i + 1; j < newList.Count; j++) {
                    // Register conflict
                    if (newList[i].IsConflict(newList[j])) {
                        Conflicts.Add(newList[j]);
                    }
                    // Remove conflicts and duplicates
                    if (newList[i].Id == newList[j].Id)
                        newList.RemoveAt(j);
                }

                if (Conflicts.Count > 1) {
                    await SetStatus(TransferStatus.Conflict);

                    IsConfirmed = false;
                    while (!IsConfirmed)
                        await Task.Delay(25);

                    newList[i] = Conflicts[ConflictChosen];
                }
            }

            await SetStatus(TransferStatus.Transferring);

            if (!await SendPasswords(stream, newList))
                return;

            await SetStatus(TransferStatus.Confirm);

            IsCancelled = IsConfirmed = false;
            while (!IsCancelled && !IsConfirmed)
                await Task.Delay(25);

            if (IsConfirmed)
                await PasswordManager.ReplaceAll(newList);
        } catch (Exception e) {
            await Application.Current.MainPage.DisplayAlert(null, e.ToString(), "Okay");
        }
    }

    // returns false if it successfully determined that this device should be host
    private async Task<bool> BeClient() {
        try {
            using BluetoothClient client = new() { Authenticate = true };
            // this call is blocking on android
            if (!OperatingSystem.IsAndroid())
                await client.ConnectAsync(ConnectedDevice.DeviceAddress, AppGuid);
            else {
                bool triedConnecting = false;
                _ = Task.Run(async () => {
                    try {
                        await client.ConnectAsync(ConnectedDevice.DeviceAddress, AppGuid);
                    } catch {}
                    triedConnecting = true;
                });
                while (!triedConnecting)
                    await Task.Delay(25);
            }

            if (!client.Connected)
                return false;

            using Stream stream = client.GetStream();

            await SetStatus(TransferStatus.IsClient);

            // wait for confirmation byte (any value)
            await stream.ReadExactlyAsync(new byte[1], 0, 1);

            Code = 0;
            await SetStatus(TransferStatus.InputCode);

            IsConfirmed = IsCancelled = false;
            while (!IsConfirmed && !IsCancelled)
                await Task.Delay(25);

            // return impossible code to cancel
            if (IsCancelled) {
                await stream.WriteAsync(BitConverter.GetBytes(-1));
                await stream.FlushAsync();
                return true;
            }

            // send back inputted value
            await stream.WriteAsync(BitConverter.GetBytes(Code));
            await stream.FlushAsync();

            // get back boolean confirmation on if it is the same
            byte[] isSame = new byte[1];
            await stream.ReadExactlyAsync(isSame, 0, 1);

            if (!BitConverter.ToBoolean(isSame)) {
                await Application.Current.MainPage.DisplayAlert(null, "Inputted code does not match.", "Okay");
                return true;
            }

            await SetStatus(TransferStatus.Transferring);

            if (!await SendPasswords(stream, await PasswordManager.GetAll()))
                return true;
            IEnumerable<Password> passwords = await RecievePasswords(stream);
            if (passwords == null)
                return true;

            await SetStatus(TransferStatus.Confirm);

            IsCancelled = IsConfirmed = false;
            while (!IsCancelled && !IsConfirmed)
                await Task.Delay(25);

            if (IsConfirmed)
                await PasswordManager.ReplaceAll(passwords);
        } catch (ArgumentOutOfRangeException) {
            // Bluetooth service was not found
            return false;
        } catch (Exception e) {
            await Application.Current.MainPage.DisplayAlert(null, e.ToString(), "Okay");
        }

        return true;
    }

    private async Task SetStatus(TransferStatus newStatus) {
        Status = newStatus;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> SendPasswords(Stream stream, IEnumerable<Password> passwords) {
        byte[] boolBuffer = new byte[1];

        // write count of passwords
        await stream.WriteAsync(BitConverter.GetBytes(passwords.Count()));
        await stream.FlushAsync();

        foreach (Password password in passwords) {
            // to xml
            string xml = password.ToXml();
            byte[] bytes = Encoding.UTF8.GetBytes(xml);

            // write length of bytes and bytes
            await stream.WriteAsync(BitConverter.GetBytes(bytes.Length));
            await stream.WriteAsync(bytes);
            await stream.FlushAsync();

            // wait for confirmation
            await stream.ReadExactlyAsync(boolBuffer, 0, 1);
            if (!BitConverter.ToBoolean(boolBuffer)) {
                await Application.Current.MainPage.DisplayAlert(null, $"Failed to send password {password.Name}, canceling sync", "Okay");
                return false;
            }
        }

        return true;
    }

    private async Task<IEnumerable<Password>> RecievePasswords(Stream stream) {
        byte[] intBuffer = new byte[4];

        // read count of passwords
        await stream.ReadExactlyAsync(intBuffer, 0, 4);

        List<Password> passwords = [];
        for (int i = BitConverter.ToInt32(intBuffer); i > 0; i--) {
            // read length of bytes and bytes
            await stream.ReadExactlyAsync(intBuffer, 0, 4);
            byte[] bytes = new byte[BitConverter.ToInt32(intBuffer)];
            await stream.ReadExactlyAsync(bytes, 0, bytes.Length);

            // from xml
            bool success = true;
            string xml = Encoding.UTF8.GetString(bytes);
            try {
                passwords.Add(Password.FromXml(xml));
            } catch (InvalidOperationException e) {
                await Application.Current.MainPage.DisplayAlert($"Failed to deserialize password", e.ToString(), "Okay");
                success = false;
            }
            // write confirmation
            await stream.WriteAsync(BitConverter.GetBytes(success));
            await stream.FlushAsync();
            if (!success)
                return null;
        }

        return passwords;
    }

    private enum TransferStatus {
        AttemptingClient,
        Listening,
        ShowCode,
        InputCode,
        IsClient,
        Transferring,
        Conflict,
        Confirm
    }
}
